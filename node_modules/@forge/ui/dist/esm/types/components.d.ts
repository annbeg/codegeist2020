import { ForgeChildren, ForgeNode } from './forge';
export interface AuxPipelineUserVisibleError extends Error {
    errorMessage?: string;
    errorDetails?: string;
}
export interface AvatarProps {
    accountId: string;
}
export interface AvatarStackProps {
    children: ForgeChildren;
}
export interface ButtonProps {
    text: string;
    disabled?: boolean;
    onClick: () => Promise<void> | void;
}
export interface ButtonSetProps {
    children: ForgeChildren;
}
export interface ErrorPanelProps {
    error: AuxPipelineUserVisibleError;
}
export declare type FormData = Record<string, any>;
export interface FormProps<T extends FormData> {
    children: ForgeChildren;
    onSubmit: (data: T) => Promise<void> | void;
    submitButtonText?: string;
}
export interface ConfigFormProps {
    children: ForgeChildren;
}
export interface ImageProps {
    src: string;
    alt: string;
}
export interface InlineDialogProps {
    children: ForgeChildren;
}
export interface ModalDialogProps {
    appearance?: 'danger' | 'warning';
    children: ForgeChildren;
    closeButtonText?: string;
    header: string;
    onClose: () => Promise<void> | void;
    width?: 'small' | 'medium' | 'large' | 'x-large';
}
export interface OptionProps {
    defaultSelected?: boolean;
    label: string;
    value: any;
}
export interface SelectProps {
    children?: ForgeChildren;
    isMulti?: boolean;
    label: string;
    name: string;
    placeholder?: string;
}
export interface CheckboxProps {
    label: string;
    value: string;
    defaultChecked?: boolean;
}
export interface CheckboxGroupProps {
    legend: string;
    name: string;
    children: ForgeChildren;
}
export interface DateLozengeProps {
    value: number;
}
export interface DatePickerProps {
    name: string;
    label: string;
    defaultValue?: string;
    placeholder?: string;
}
export declare type LozengeAppearance = 'default' | 'inprogress' | 'moved' | 'new' | 'removed' | 'success';
export interface LozengeProps {
    appearance: LozengeAppearance;
    text: string;
}
export interface TextFieldProps {
    name: string;
    label: string;
    isRequired?: boolean;
    defaultValue?: string;
    placeholder?: string;
}
export interface ThreeLOPromptProps {
    message?: string;
    promptText?: string;
    authUrl: string;
}
export interface RadioProps {
    defaultChecked?: boolean;
    label: string;
    value: string;
}
export interface RadioGroupProps {
    children?: ForgeChildren;
    isRequired?: boolean;
    label: string;
    name: string;
}
export interface TextAreaProps {
    name: string;
    label: string;
    defaultValue?: string;
    isMonospaced?: boolean;
    isRequired?: boolean;
    placeholder?: string;
    spellCheck?: boolean;
}
export interface UserPickerProps {
    name: string;
    label: string;
    placeholder?: string;
    defaultValue?: string;
}
interface TextProps {
    format?: 'markdown' | 'plaintext';
}
interface TextPropsWithContent extends TextProps {
    content: string;
}
interface TextPropsWithChildren extends TextProps {
    children: ForgeChildren<ForgeNode | string | number>;
}
export declare type JsxTextProps = TextPropsWithContent | TextPropsWithChildren;
export declare type RenderedTextProps = {
    content: string;
    format?: 'plaintext';
} | {
    content: object;
    format: 'adf';
};
export interface TableProps {
    children: ForgeChildren;
}
export interface HeadProps {
    children: ForgeChildren;
}
export interface RowProps {
    children: ForgeChildren;
}
export interface CellProps {
    children?: ForgeChildren;
}
export {};
