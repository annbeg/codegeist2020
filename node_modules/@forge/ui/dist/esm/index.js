// pragma
function createElement(type, props, ...children) {
    const element = {
        key: null,
        props: {
            ...props,
            children: children.reduce((flattened, child) => {
                // we want to render NaN and 0 inside of Text
                if (child || typeof child === 'number') {
                    return flattened.concat(child);
                }
                return flattened;
            }, []),
        },
    };
    if (typeof type === 'string') {
        return {
            type,
            ...element,
        };
    }
    return {
        type,
        ...element,
    };
}
export { render } from './backend-runtime';
export { useAction } from './hooks/useAction';
export { useState } from './hooks/useState';
export { useProductContext } from './hooks/useProductContext';
export { useConfig } from './hooks/useConfig';
export { isJiraContext } from './types';
export * from './components';
export default { createElement };
