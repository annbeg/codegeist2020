"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const markdown_it_1 = tslib_1.__importDefault(require("markdown-it"));
const prosemirror_markdown_1 = require("prosemirror-markdown");
const adf_schema_1 = require("@atlaskit/adf-schema");
const editor_json_transformer_1 = require("@atlaskit/editor-json-transformer");
const mdParser = markdown_it_1.default('zero', { linkify: true, breaks: true }).enable([
    'emphasis',
    'strikethrough',
    'newline',
    'link',
    'linkify',
    'backticks',
]);
const defaultParagraphRule = mdParser.block.ruler.getRules('')[0];
// wrap original paragraph rule to preserve surrounding whitespace
const newParagraphRule = (state, startLine) => {
    const nextLine = state.lineMax;
    const originalContent = state.getLines(startLine, nextLine, state.blkIndent, false);
    defaultParagraphRule(state, startLine);
    // defaultParagraphRule always pushes 3 tokens on (start paragraph, inline content, end paragraph)
    const contentToken = state.tokens[state.tokens.length - 2];
    if (contentToken && contentToken.type === 'inline') {
        contentToken.content = originalContent;
    }
    return true;
};
const auxMarkdownParser = new prosemirror_markdown_1.MarkdownParser(adf_schema_1.defaultSchema, mdParser, {
    paragraph: { block: 'paragraph' },
    softbreak: { node: 'hardBreak' },
    hardbreak: { node: 'hardBreak' },
    strong: { mark: 'strong' },
    em: { mark: 'em' },
    s: { mark: 'strike' },
    // eslint-disable-next-line @typescript-eslint/camelcase
    code_inline: { mark: 'code' },
    link: {
        mark: 'link',
        getAttrs: (tok) => ({
            href: tok.attrGet('href'),
            title: tok.attrGet('title') || null,
        }),
    },
});
const jsonTransformer = new editor_json_transformer_1.JSONTransformer();
exports.md2Adf = (md, overrideParagraphRule = false) => {
    if (overrideParagraphRule) {
        mdParser.block.ruler.at('paragraph', newParagraphRule);
    }
    else {
        mdParser.block.ruler.at('paragraph', defaultParagraphRule);
    }
    const doc = auxMarkdownParser.parse(md);
    return jsonTransformer.encode(doc);
};
