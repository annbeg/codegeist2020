"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const types_1 = require("./types");
const components_1 = require("./components");
const reconcilerState_1 = tslib_1.__importDefault(require("./reconcilerState"));
const markdown_1 = require("./markdown");
exports.isTextElement = (element) => element.type === 'Text';
const flatMap = (fn, items) => items.reduce((bs, a) => bs.concat(fn(a)), []);
const asyncMap = async (fn, items) => {
    const results = [];
    for (const x of items) {
        const result = await fn(x);
        results.push(result);
    }
    return results;
};
const _processAuxElement = (getUniqueName, path) => async (element) => {
    if (typeof element === 'string' || typeof element === 'number') {
        return {
            type: 'text',
            text: element.toString(),
            children: [],
        };
    }
    else if (typeof element.type === 'string') {
        const key = getUniqueName(`${element.props.__auxId || element.type}`);
        const currentEffect = reconcilerState_1.default.currentEffect;
        if (currentEffect &&
            types_1.isEventEffect(currentEffect) &&
            key === currentEffect.handler.componentKey) {
            reconcilerState_1.default.enableSideEffectsQueue();
            await element.props[currentEffect.handler.prop](...currentEffect.args);
            reconcilerState_1.default.disableSideEffectsQueue();
        }
        return {
            type: 'primitive',
            element: {
                ...element,
                type: element.type,
            },
            key,
            children: await asyncMap(_processAuxElement(getUniqueName, [...path, element.type]), element.props.children.filter(types_1.isForgeElement)),
        };
    }
    else if (typeof element.type === 'function') {
        // function component
        const { __auxId, ...props } = element.props;
        if (element.type === components_1.Macro) {
            if (!reconcilerState_1.default.config) {
                // set default config if no config exists
                reconcilerState_1.default.config = element.props.defaultConfig;
            }
        }
        reconcilerState_1.default.wipFiber = {
            type: 'function',
            element: {
                ...element,
                type: element.type,
            },
            key: getUniqueName(`${__auxId || element.type.name}`),
            hooks: [],
            currentHookIndex: 0,
            children: [],
        };
        let children = undefined;
        while (children === undefined) {
            try {
                children = element.type(props);
            }
            catch (e) {
                if (e instanceof Promise) {
                    await e;
                }
                else {
                    throw e;
                }
            }
        }
        const fiber = {
            ...reconcilerState_1.default.wipFiber,
            currentHookIndex: 0,
        };
        reconcilerState_1.default.clearWipFiber();
        return {
            ...fiber,
            children: await asyncMap(_processAuxElement(getUniqueName, [...path, element.type.name]), children ? [children] : []),
        };
    }
    throw new Error(`Unexpected child type: ${Array.isArray(element) ? 'Array' : element.type || typeof element}. Valid children are @forge/ui components, function components, and strings.\nError occurred in ${path.length > 0 ? path[path.length - 1] : 'render'}${path.length > 1 ? ':\n\tin ' : '.'}${path
        .reverse()
        .slice(1)
        .join('\n\tin ')}`);
};
exports.processAuxElement = async (element) => {
    const visitedElements = {};
    const getUniqueName = name => {
        if (typeof visitedElements[name] === 'undefined') {
            visitedElements[name] = 0;
        }
        else {
            visitedElements[name]++;
        }
        return `${name}.${visitedElements[name]}`;
    };
    return _processAuxElement(getUniqueName, [])(element);
};
const overrideHandlers = (type, key) => {
    if (type === 'Button') {
        return {
            onClick: {
                componentKey: key,
                prop: 'onClick',
            },
        };
    }
    else if (type === 'Form') {
        return {
            onSubmit: {
                componentKey: key,
                prop: 'onSubmit',
            },
        };
    }
    else if (type === 'ModalDialog') {
        return {
            onClose: {
                componentKey: key,
                prop: 'onClose',
            },
        };
    }
    return {};
};
const getColorFromAppearance = (appearance) => {
    switch (appearance) {
        case 'inprogress':
            return 'blue';
        case 'moved':
            return 'yellow';
        case 'new':
            return 'purple';
        case 'removed':
            return 'red';
        case 'success':
            return 'green';
        default:
            return 'grey';
    }
};
exports.getAdfFromFiber = (processMarkdown = true) => {
    const _getAdfFromFiber = (fiber) => {
        if (fiber.type === 'text') {
            if (processMarkdown) {
                const doc = markdown_1.md2Adf(fiber.text || '', true);
                // doc.content will be empty when processing just whitespace strings
                if (doc.content[0]) {
                    return doc.content[0].content;
                }
            }
            return [
                {
                    type: 'text',
                    text: fiber.text,
                },
            ];
        }
        else if (fiber.type === 'primitive') {
            const { type, props } = fiber.element;
            if (type === 'Lozenge') {
                return [
                    {
                        type: 'status',
                        attrs: {
                            text: props.text,
                            color: getColorFromAppearance(props.appearance),
                        },
                    },
                ];
            }
            else if (type === 'DateLozenge') {
                return [
                    {
                        type: 'date',
                        attrs: {
                            timestamp: props.value,
                        },
                    },
                ];
            }
            else if (type === 'Fragment') {
                return flatMap(_getAdfFromFiber, fiber.children);
            }
            return [];
        }
        return flatMap(_getAdfFromFiber, fiber.children);
    };
    return _getAdfFromFiber;
};
/*
JSX splits up interpolated strings so we need to merge consecutive strings back together
in order to allow markdown to transform the text properly
*/
exports.mergeConsecutiveTextFibers = (fibers, currentFiber) => {
    const previousFiber = fibers[fibers.length - 1];
    if (currentFiber.type === 'text' &&
        previousFiber &&
        previousFiber.type === 'text') {
        const mergedTextFiber = {
            ...previousFiber,
            text: previousFiber.text + currentFiber.text,
        };
        return fibers.slice(0, fibers.length - 1).concat(mergedTextFiber);
    }
    return fibers.concat(currentFiber);
};
exports.getAuxFromFiber = (fiber) => {
    /** Transform markdown to ADF
     * @see https://product-fabric.atlassian.net/wiki/spaces/AUX/pages/959122884/AUX+RFC-7+Text+rendering+pipeline
     */
    if (fiber.type === 'primitive') {
        const { element, key, children } = fiber;
        if (element.type === 'Text') {
            let props;
            const { format } = element.props;
            const processMarkdown = format === undefined || format === 'markdown';
            try {
                if (children.length > 0) {
                    props = {
                        format: 'adf',
                        content: {
                            type: 'doc',
                            version: 1,
                            content: [
                                {
                                    type: 'paragraph',
                                    content: children
                                        .reduce(exports.mergeConsecutiveTextFibers, [])
                                        .reduce((content, child) => content.concat(exports.getAdfFromFiber(processMarkdown)(child)), []),
                                },
                            ],
                        },
                    };
                }
                else {
                    if (processMarkdown) {
                        props = {
                            format: 'adf',
                            content: markdown_1.md2Adf(element.props.content || ''),
                        };
                    }
                    else {
                        props = {
                            format: 'plaintext',
                            content: element.props.content,
                        };
                    }
                }
            }
            catch (err) {
                props = {
                    format: 'plaintext',
                    content: `Error parsing markdown\n${err}`,
                };
            }
            return [
                {
                    type: element.type,
                    children: [],
                    key,
                    props,
                },
            ];
        }
        else if (element.type === 'Fragment') {
            return flatMap(exports.getAuxFromFiber, children);
        }
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { children: _, ...props } = element.props;
        return [
            {
                children: flatMap(exports.getAuxFromFiber, children),
                key,
                props: {
                    ...props,
                    ...overrideHandlers(element.type, fiber.key),
                },
                type: element.type,
            },
        ];
    }
    else if (fiber.type === 'text') {
        throw new Error('String or number elements must be used inside Text components');
    }
    // function fiber
    return flatMap(exports.getAuxFromFiber, fiber.children);
};
exports.getStateFromFiber = (fiber) => {
    let state = {};
    if (fiber.type === 'function' &&
        fiber.hooks.some(hook => hook.type === 'action')) {
        state = {
            [fiber.key]: fiber.hooks.reduce((map, hook, hookIndex) => {
                if (hook.type === 'action') {
                    map[hookIndex] = hook.value;
                }
                return map;
            }, {}),
        };
    }
    fiber.children.forEach(child => {
        state = { ...state, ...exports.getStateFromFiber(child) };
    });
    return state;
};
