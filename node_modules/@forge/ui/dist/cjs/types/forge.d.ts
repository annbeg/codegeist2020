export interface ComponentState {
    [hookIndex: number]: any;
}
export interface RenderState {
    [componentKey: string]: ComponentState;
}
export interface Handler {
    componentKey: string;
    prop: string;
}
export interface Forge {
    children: Forge[];
    key?: string;
    props?: {
        [key: string]: any;
    };
    type: string;
}
export declare type ForgeElement<P = Record<string, any>> = PrimitiveElement<P> | FunctionElement<P>;
export interface PrimitiveElement<P = Record<string, any>> {
    type: string;
    key: number | string | null;
    props: P & {
        children: ForgeNode[];
    };
}
export interface FunctionElement<P = Record<string, any>> {
    type: (props: P) => ForgeElement;
    key: number | string | null;
    props: P & {
        children: ForgeNode[];
    };
}
export declare const isForgeElement: (auxNode: ForgeNode) => auxNode is ForgeElement<Record<string, any>>;
export declare type ForgeNode = ForgeElement | null | boolean | undefined;
export declare type ForgeChildren<T = ForgeNode> = T | (T | T[])[];
export interface PlatformContext {
    type: string;
}
export interface ExtensionContext {
    type: string;
}
export interface ProductContext {
    accountId?: string;
    cloudId?: string;
    contentId?: string;
    localId?: string;
    spaceKey?: string;
    installContext?: string;
    platformContext?: PlatformContext;
    isConfig?: boolean;
    extensionContext?: ExtensionContext;
}
export interface ExtensionConfiguration {
    [key: string]: any;
}
export interface JiraContext extends PlatformContext {
    type: 'jira';
    issueId: number;
    issueKey: string;
    issueType: string;
    projectKey: string;
    projectId: string;
}
export declare const isJiraContext: (context: PlatformContext) => context is JiraContext;
export interface ContextMenuExtensionContext extends ExtensionContext {
    type: 'contextMenu';
    selectedText: string;
}
export interface ContentActionExtensionContext extends ExtensionContext {
    type: 'contentAction';
}
export declare const isContextMenuExtensionContext: (extensionContext: ExtensionContext) => extensionContext is ContextMenuExtensionContext;
export declare const isContentActionExtensionContext: (extensionContext: ExtensionContext) => extensionContext is ContentActionExtensionContext;
